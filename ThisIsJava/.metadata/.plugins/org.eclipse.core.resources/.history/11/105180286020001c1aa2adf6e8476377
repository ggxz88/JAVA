package chap19.section02;

import java.nio.file.FileSystems;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardWatchEventKinds;
import java.nio.file.WatchEvent;
import java.nio.file.WatchEvent.Kind;
import java.nio.file.WatchKey;
import java.nio.file.WatchService;
import java.util.List;

public class WatchServiceExample extends Application {
	class WatchServiceThread extends Thread {
		@Override
		public void run() {
			try {
				WatchService watchService = FileSystems.getDefault().newWatchService();
				Path directory = Paths.get("C:/Temp");
				directory.register(watchService, StandardWatchEventKinds.ENTRY_CREATE,
						StandardWatchEventKinds.ENTRY_DELETE, StandardWatchEventKinds.ENTRY_MODIFY);
				
				while (true) {
					WatchKey watchKey = watchService.take();	//블로킹(WatchKey가 큐에 들어올 때까지)
					List<WatchEvent<?>> list = watchKey.pollEvents();	//WatchEvent 목록 얻기
					for (WatchEvent watchEvent : list) {
						//이벤트 종류 얻기
						Kind kind = watchEvent.kind();
						//감지된 Path 얻기
						Path path = (Path) watchEvent.context();
						if (kind == StandardWatchEventKinds.ENTRY_CREATE) {
							//생성되었을 경우, 실행할 코드
							Platform
							.runLater(() -> textArea.appendText("파일 생성됨 -> " + path.getFileName() + "\n"));
						} else if (kind == StandardWatchEventKinds.ENTRY_DELETE) {
							//삭제되었을 경우, 실행할 코드
							Platform
							.runLater(() -> textArea.appendText("파일 삭제됨 -> " + path.getFileName() + "\n"));
						} else if (kind == StandardWatchEventKinds.ENTRY_MODIFY) {
							//수정되었을 경우, 실행할 코드
							Platform
							.runLater(() -> textArea.appendText("파일 변경됨 -> " + path.getFileName() + "\n"));
						} else if (kind == StandardWatchEventKinds.OVERFLOW) {
							
						}
					} 
					
					boolean valid = watchKey.reset();
					if (!valid) { 
						break;
					}
				}
			} catch (exception e) {
				
			}
		}
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
